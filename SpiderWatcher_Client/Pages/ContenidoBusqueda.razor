@page "/contenidoBusqueda"
@using SpiderWatcher_Client.DTOs.ContentDTO
@using Newtonsoft.Json
@using SpiderWatcher_Client.Models
@using System.Net.Http.Headers
@inject AuthenticationService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row mb-4 align-items-center">
        <div class="col-auto">
            <button class="btn btn-secondary" @onclick="BackButtonClicked">&#x2190;</button>
        </div>
        <div class="col">
            <span class="icon">&#128269;</span>
            <input type="text" id="searchInput" class="form-control" placeholder="Buscar" @bind="searchQuery" @onkeydown="HandleKeyDown">
        </div>
    </div>
    <div class="row" id="videoGrid">
        <!-- Video Thumbnails will be inserted here -->
        @if(contents2 is null)
        {
            <p>Empty</p>
        }else if(contents2.Count == 0)
        {
            <p>No se encontraron resultados</p>
        }
        else
        {
            <div class="row">
                @foreach (var content in contents2)
                {
                    <div class="col mt-3">
                        <div class="card">
                            <img src="" class="card-img-top" alt="No image"/>

                            <div class="card-body">
                                <p class="card-text"><strong>@content.title</strong></p>
                                <p class="card-text">@content.idContent</p>
                                <p class="card-text">@content.imageReference</p>
                            </div>

                        </div>
                    </div>
                }
            </div>
        }

    </div>

</div>

@code {
    private string searchQuery;
    private string successMessage;
    private string errorMessage;
    private ContentsDTO contentsDTO = new ContentsDTO();
    //private Contents contents { get; set; }
    private List<ContentsDTO> contents2 = new List<ContentsDTO>();

    protected override Task OnInitializedAsync()
    {
        ExecuteSearch();
        return base.OnInitializedAsync();
    }

    private async Task BackButtonClicked()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ExecuteSearch();
        }
    }

    private async void ExecuteSearch()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            Console.WriteLine($"Buscar: {searchQuery}");
            try
            {

                var token = await AuthService.GetTokenAsync();
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var response = await Http.GetAsync("Content");
                if (response.IsSuccessStatusCode)
                {
                    var responseBody = await response.Content.ReadAsStringAsync();
                    contents2 = JsonConvert.DeserializeObject<List<ContentsDTO>>(responseBody);
                    StateHasChanged();
                }
                else
                {
                    errorMessage = "No se encontraron resultados";
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        // var result = await Http.GetAsync($"api/busqueda?query={searchQuery}");
            // var content = await result.Content.ReadAsStringAsync();
            // Procesa el resultado de la búsqueda
        }
    }
}

