@page "/visualizarContenido/{id}"
@using SpiderWatcher_Client.Conexion
@using SpiderWatcher_Client.DTOs.ContentDTO
@using Newtonsoft.Json
@using System.Net.Http.Headers
@inject Conexion.AzureBlobService AzureBlobService
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Visualizar Contenido</PageTitle>

@if (!authenticated)
{
    <p>Redireccionando...</p>
}
else
{
    <div class="container mt-4 bg-dark text-white">
        <div class="video-preview">
            @if (readContentDTO.ImageData != null && readContentDTO.ImageData.Length > 0)
            {
                var imageBase64 = Convert.ToBase64String(readContentDTO.ImageData);
                <div class="blurred-background" style="background-image: url('data:image/png;base64,@imageBase64');"></div>
                <div class="image-container">
                    <img src="data:image/png;base64,@imageBase64" class="img-fluid" alt="Vista Previa del Video">
                    <button class="play-button btn btn-primary" @onclick="PlayVideo">&#9658;</button>
                </div>
            }
            else
            {
                <div class="image-container">
                    <img src="" class="img-fluid" alt="Vista Previa del Video">
                </div>
            }
        </div>
        <div class="video-details mt-3">
            <button class="btn btn-light back-button" @onclick="BackButtonClicked">&#x2190; Atrás</button>
            <h1 id="videoTitle">@readContentDTO.Title</h1>
            <p id="videoDescription">@readContentDTO.Description</p>
            <p class="director">Director: <span id="videoDirector">@readContentDTO.Director</span></p>
            <p>Fecha: <span id="videoDate">@readContentDTO.PublicationDate</span></p>
            <p>Duración: <span id="videoDuration">@readContentDTO.Duration</span></p>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private bool authenticated;
    private ReadContentDTO readContentDTO = new ReadContentDTO();

    protected override async Task OnInitializedAsync()
    {
        await InitializeComponentAsync();
    }

    private async Task InitializeComponentAsync()
    {
        authenticated = await AuthService.IsUserAuthenticatedAsync();
        if (!authenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await LoadContentAsync();
        }
    }

    private async Task LoadContentAsync()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await Http.GetAsync($"Content/{Id}");
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                readContentDTO = JsonConvert.DeserializeObject<ReadContentDTO>(responseBody);

                if (!string.IsNullOrEmpty(readContentDTO.ImageReference))
                {
                    readContentDTO.ImageData = await AzureBlobService.GetImageAsync(readContentDTO.ImageReference);
                }
                else
                {
                    readContentDTO.ImageData = Array.Empty<byte>();
                }
            }
            else
            {
                Console.WriteLine("Error al obtener el contenido.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void BackButtonClicked()
    {
        NavigationManager.NavigateTo("/contenidoBusqueda");
    }

    private void PlayVideo()
    {
        var videoReference = readContentDTO.VideoReference;
        NavigationManager.NavigateTo($"/reproducirContenido/{videoReference}");
    }
}

<style>
    .video-preview {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .image-container {
        position: relative;
        display: inline-block;
    }

    .blurred-background {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-size: cover;
        filter: blur(15px);
        z-index: 1;
    }

    .img-fluid {
        position: relative;
        z-index: 2;
        display: block;
        max-width: 100%;
        height: auto;
    }

    .play-button {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 3;
    }
</style>
