@page "/reproducirContenido/{videoReference}"

@using SpiderWatcher_Client.Conexion
@using SpiderWatcher_Client.DTOs.ContentDTO
@using Newtonsoft.Json
@using SpiderWatcher_Client.Models
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Conexion.AzureVideoService AzureVideoService



<div class="video-container">
    @if (!string.IsNullOrEmpty(videoUrl))
    {
        <video id="video" controls>
            <source src="@videoUrl" type="video/mp4" />
            Your browser does not support the video tag.
        </video>
        <div class="controls">
            <button @onclick="RewindClicked" class="btn btn-dark">⏪</button>
            <button @onclick="PlayPauseClicked" class="btn btn-dark">@playPauseButtonText</button>
            <button @onclick="ForwardClicked" class="btn btn-dark">⏩</button>
        </div>
        <button @onclick="BackButtonClicked" class="btn btn-dark back-button">← Atrás</button>
    }
    else
    {
        <p>Loading video...</p>
    }
</div>

@code {
    [Parameter]
    public string videoReference { get; set; }
    private byte[] videoData;
    private string videoUrl;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            videoData = await AzureVideoService.GetVideoAsync(videoReference);
            videoUrl = ConvertToDataUrl(videoData);
            //liberate memory
            videoData = null;
            Console.WriteLine(videoUrl); // Agregar esta línea para debug
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private string ConvertToDataUrl(byte[] videoData)
    {
        if (videoData == null || videoData.Length == 0)
        {
            return null;
        }

        var base64String = Convert.ToBase64String(videoData);
        return $"data:video/mp4;base64,{base64String}";
    }

    private string playPauseButtonText = "⏯️";
    ReadContentDTO readContentDTO = new ReadContentDTO();

    private async Task PlayPauseClicked()
    {
        if (playPauseButtonText == "⏯️")
            playPauseButtonText = "▶️";
        else
            playPauseButtonText = "⏯️";
    }

    private async Task RewindClicked()
    {
        // Rebobinar
    }

    private async Task ForwardClicked()
    {
        // Adelantar
    }

    private async Task BackButtonClicked()
    {
        // Regresar
        NavigationManager.NavigateTo("/visualizarContenido");
    }
}

<style>
    .video-container {
        position: relative;
        width: 100%;
        background-color: #343a40;
        color: white;
    }

        .video-container video {
            width: 100%;
            display: block;
        }

    .controls {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

        .controls button {
            margin: 0 10px;
        }

    .back-button {
        position: absolute;
        top: 10px;
        left: 10px;
    }
</style>
